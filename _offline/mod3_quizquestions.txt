//Question 1
::Q1::
Constructors are simply functions that create ______.
{
~methods
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
~properties
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
~variables
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
=objects
#Correct! See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
}

//Question 2
::Q2::
By convention, constructor functions always begin with a ______, whereas nonconstructor functions begin with a ______.
{
~lowercase letter, uppercase letter
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
~number, special character
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
~special character, number
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
=uppercase letter, lowercase letter
#Correct! See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
}

//Question 3
::Q3::
Any function that is called with the ______ operator acts as a constructor, whereas any function called without it acts just as you would expect a normal function call to act.
{
~bind
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
~create
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
~declare
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
=new
#Correct! See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
}

//Question 4
::Q4::
The ______ pattern is the most widely used and accepted practice for defining custom reference types. Generally speaking, this is the default pattern to use for defining reference types.
{
~constructor
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
~prototype
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
~factory
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
=hybrid constructor/prototype
#Correct! See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
}

//Question 5
::Q5::
In this object creation pattern approach, each instance ends up with its own copy of the instance properties, but they all share references to methods, conserving memory.
{
~durable constructor
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
~parasitic constructor
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
~dynamic prototype
#Incorrect. See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
=hybrid constructor/prototype
#Correct! See Professional JavaScript for Web Developers > Chapter 6 > Object-Oriented Programming
}